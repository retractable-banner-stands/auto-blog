#!/usr/bin/env python3
"""
Integrated BigCommerce Blog Generator with Image Optimization
Combines content generation, image creation, optimization, and publishing
"""

import requests
import base64
import json
import os
from PIL import Image

def optimize_image_for_web(image_path, target_size_kb=100, max_dimension=1200):
    """
    Optimize image to target file size while maintaining quality
    """
    target_size_bytes = target_size_kb * 1024
    
    try:
        with Image.open(image_path) as img:
            # Convert to RGB if necessary
            if img.mode in ('RGBA', 'LA', 'P'):
                background = Image.new('RGB', img.size, (255, 255, 255))
                if img.mode == 'P':
                    img = img.convert('RGBA')
                background.paste(img, mask=img.split()[-1] if img.mode == 'RGBA' else None)
                img = background
            elif img.mode != 'RGB':
                img = img.convert('RGB')
            
            # Resize if too large
            width, height = img.size
            if width > max_dimension or height > max_dimension:
                if width > height:
                    new_width = max_dimension
                    new_height = int(height * (max_dimension / width))
                else:
                    new_height = max_dimension
                    new_width = int(width * (max_dimension / height))
                
                img = img.resize((new_width, new_height), Image.Resampling.LANCZOS)
            
            # Optimize quality to meet size target
            quality = 95
            while quality > 20:
                temp_path = image_path + '.temp'
                img.save(temp_path, 'WebP', quality=quality, optimize=True)
                
                file_size = os.path.getsize(temp_path)
                
                if file_size <= target_size_bytes:
                    os.rename(temp_path, image_path)
                    print(f"✅ Optimized {os.path.basename(image_path)}: {file_size/1024:.1f}KB")
                    return True
                else:
                    os.remove(temp_path)
                    quality -= 5
            
            # Save at minimum quality if still too large
            img.save(image_path, 'WebP', quality=20, optimize=True)
            final_size = os.path.getsize(image_path)
            print(f"⚠️  {os.path.basename(image_path)}: {final_size/1024:.1f}KB (min quality)")
            return True
            
    except Exception as e:
        print(f"❌ Error optimizing {image_path}: {e}")
        return False

def convert_image_to_base64(image_path):
    """Convert optimized image to base64"""
    try:
        with open(image_path, 'rb') as image_file:
            return base64.b64encode(image_file.read()).decode('utf-8')
    except Exception as e:
        print(f"Error converting {image_path}: {e}")
        return None

def generate_and_optimize_images(image_configs):
    """
    Generate images using MANUS and automatically optimize them
    
    Args:
        image_configs: List of image configuration dictionaries
    
    Returns:
        List of optimized image data for API submission
    """
    
    # Import MANUS media generation (this would be the actual MANUS function)
    # For now, we'll assume images are already generated and just optimize them
    
    optimized_images = []
    
    for config in image_configs:
        image_path = config['path']
        
        # Check if image exists (would be generated by MANUS in real implementation)
        if os.path.exists(image_path):
            print(f"Optimizing {os.path.basename(image_path)}...")
            
            # Optimize the image
            if optimize_image_for_web(image_path, target_size_kb=100):
                # Convert to base64
                base64_data = convert_image_to_base64(image_path)
                if base64_data:
                    optimized_images.append({
                        "filename": os.path.basename(image_path),
                        "base64": base64_data
                    })
                    
                    # Show final size
                    final_size = os.path.getsize(image_path)
                    print(f"  Final size: {final_size/1024:.1f}KB")
        else:
            print(f"❌ Image not found: {image_path}")
    
    return optimized_images

def submit_optimized_blog_post(title, html_content, image_configs):
    """
    Complete workflow: generate images, optimize, and submit blog post
    """
    
    print("🚀 Starting Optimized Blog Generation")
    print("=" * 50)
    
    # Step 1: Generate and optimize images
    print("📸 Processing images...")
    optimized_images = generate_and_optimize_images(image_configs)
    
    if not optimized_images:
        print("❌ No images to include")
        return None
    
    print(f"✅ Processed {len(optimized_images)} images")
    
    # Step 2: Create payload
    payload = {
        "title": title,
        "html": html_content,
        "images": optimized_images
    }
    
    # Calculate total payload size
    payload_size = len(json.dumps(payload))
    print(f"📦 Payload size: {payload_size/1024/1024:.1f}MB")
    
    # Step 3: Submit to BigCommerce API
    api_url = "http://206.189.76.235/publish"
    headers = {
        "Content-Type": "application/json",
        "x-api-secret": "mySuperSecret123"
    }
    
    print("📤 Submitting to BigCommerce...")
    
    try:
        response = requests.post(api_url, headers=headers, json=payload, timeout=120)
        
        if response.status_code == 200:
            result = response.json()
            print("✅ SUCCESS! Blog post published!")
            print("Response:", result)
            
            # Show image size summary
            total_size = sum(os.path.getsize(config['path']) for config in image_configs if os.path.exists(config['path']))
            print(f"📊 Total optimized image size: {total_size/1024:.1f}KB")
            
            return result
        else:
            print("❌ Error:", response.status_code)
            print("Response:", response.text)
            return None
            
    except Exception as e:
        print("❌ Exception:", e)
        return None

# Example usage function
def example_blog_generation():
    """Example of how to use the integrated system"""
    
    # Define images that would be generated
    image_configs = [
        {"path": "/home/ubuntu/wholesale_feather_flags_comparison.webp"},
        {"path": "/home/ubuntu/feather_flag_types_showcase.webp"},
        {"path": "/home/ubuntu/double_sided_flag_visibility.webp"},
        {"path": "/home/ubuntu/weather_resistance_testing.webp"},
        {"path": "/home/ubuntu/material_quality_breakdown.webp"},
        {"path": "/home/ubuntu/roi_calculation_chart.webp"},
        {"path": "/home/ubuntu/design_best_practices.webp"}
    ]
    
    # Sample HTML content (would be generated by content system)
    html_content = """
    <div style="max-width:840px;margin:0 auto;padding:16px 20px;">
        <h2>Sample Optimized Blog Post</h2>
        <p>This is a test of the integrated system with optimized images.</p>
        <img src="{{wholesale_feather_flags_comparison.webp}}" alt="comparison" style="width:100%;height:auto;"/>
    </div>
    """
    
    # Submit the blog post
    result = submit_optimized_blog_post(
        title="Test: Optimized Image Blog Post",
        html_content=html_content,
        image_configs=image_configs
    )
    
    return result

if __name__ == "__main__":
    print("🎯 Integrated Blog Generator with Image Optimization")
    print("This script combines MANUS image generation with automatic optimization")
    print("All images will be optimized to under 100KB while maintaining quality")
    print()
    
    # Run example
    example_blog_generation()

